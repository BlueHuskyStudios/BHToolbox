package bht.tools.comps;

import bht.resources.Icons;
import bht.tools.misc.YesNoBox;

/**
 * A panel meant to display on the bottom of a frame to show messages to the user
 * @author Supuhstar
 * @since Mar 4, 2011, 3:40:49 AM
 */
public class BHMessagePanel extends javax.swing.JPanel
{
  /**
   * Creates new form BHMessagePanel with the default message and message type
   */
  public BHMessagePanel()
  {
    initComponents();
    initScrollTimer();
    alertOf(message, type);
  }
  /**
   * Creates new form BHMessagePanel with the given message and default message type
   * @param defMessage a <tt>String</tt> containing the default message to be displayed
   */
  public BHMessagePanel(String defMessage)
  {
    initComponents();
    initScrollTimer();
    alertOf(defMessage, type);
  }
  /**
   * Creates new form BHMessagePanel with the default message and given type
   * @param defType a <tt>byte</tt> representing the default type of message to be displayed
   */
  public BHMessagePanel(byte defType)
  {
    initComponents();
    initScrollTimer();
    alertOf(message, defType);
  }
  /**
   * Creates new form BHMessagePanel with the given message and message type
   * @param defMessage a <tt>String</tt> containing the default message to be displayed
   * @param defType a <tt>byte</tt> representing the default type of message to be displayed
   */
  public BHMessagePanel(String defMessage, byte defType)
  {
    initComponents();
    initScrollTimer();
    alertOf(defMessage, defType);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING_MES: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        messageSeparator = new javax.swing.JSeparator();
        messageLabelScrollPane = new javax.swing.JScrollPane();
        messageLabel = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(24, 24));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(messageSeparator, gridBagConstraints);

        messageLabelScrollPane.setBorder(null);
        messageLabelScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        messageLabelScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        messageLabel.setText(message);
        messageLabelScrollPane.setViewportView(messageLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(messageLabelScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(iconLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
  private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
  {//GEN-HEADEREND:event_formComponentResized
    if (shouldScroll())
      scrollTimer.start();
    else
      scrollTimer.stop();
  }//GEN-LAST:event_formComponentResized

  /**
   * A convenience method for clearing the text and icon of the message panel.<br/>
   * <i>Equivalent to <tt>alertOf(null, PLAIN_MES);</tt></i>
   */
  public void clear()
  {
    alertOf(null, PLAIN_MES);
  }
  
  /**
   * Returns the message currently being displayed (or last displayed if being used in a console).
   * @return the <tt>String</tt> representing the message
   */
  public String getMessage()
  {
    return message;
  }

  /**
   * Returns the type of message currently being displayed (or last displayed if being used in a console).
   * @return the <tt>byte</tt> representing the type of message
   */
  public byte getType()
  {
    return type;
  }

  private javax.swing.Icon getIcon(byte type)
  {
//    System.out.println(PLAIN_MES + ", " + INFO_MES + ", " + QUESTION_MES + ", " + WARNING_MES + ", " + ERROR_MES + " : " + type);
    try
    {
      switch (type)
      {
        case INFO_MES:
          return Icons.getIcon(Icons.INFO_16);
        case QUESTION_MES:
          return Icons.getIcon(Icons.QUESTION_16);
        case WARNING_MES:
          return Icons.getIcon(Icons.WARNING_16);
        case ERROR_MES:
          return Icons.getIcon(Icons.ERROR_16);
        case PLAIN_MES:
        default:
          return null;
      }
    }
    catch (Throwable t)
    {
      t.printStackTrace();
      return null;
    }
  }
  
  private java.awt.Window getOwnerWindow(java.awt.Component comp)
  {
    if (comp instanceof java.awt.Window)
      return (java.awt.Window)comp;
    if (comp.getParent() instanceof java.awt.Window)
      return (java.awt.Window)(comp.getParent());
    return (getOwnerWindow(comp.getParent()));
  }

  private boolean shouldScroll()
  {
    return messageLabel.getWidth() >= messageLabelScrollPane.getWidth() && autoscroll;
  }
  
  @Override
  public String toString()
  {
    String str;
    switch (type)
    {
      default:
      case PLAIN_MES:
        str = "";
        break;
      case INFO_MES:
        str = "[INFO]";
        break;
      case QUESTION_MES:
        str = "[QUESTION]";
        break;
      case WARNING_MES:
        str = "[WARNING]";
        break;
      case ERROR_MES:
        str = "[ERROR]";
        break;
    }
    return str + " " + message;
  }

  /**
   * Sets the text in the message area. The currently displayed icon is reused.<br/>
   * <i>Equivalent of <tt>alertOf(message, getType());</tt></i>
   * @param message the message which the user will see
   * @return a <tt>String</tt> version of the alert, intended for console use.
   */
  public String alertOf(String message)
  {
    return alertOf(message, type);
  }

  /**
   * Sets the panel's message, color, and icon. The <tt>byte</tt> mask tells the panel which icon
   * to display
   * @param message the message which the user will see
   * @param type the type of message. Use the provided <tt>byte</tt> constant masks.
   * @return a <tt>String</tt> version of the alert, intended for console use.
   */
  @SuppressWarnings("UseOfSystemOutOrSystemErr")
  public String alertOf(String message, byte type)
  {
    this.message = message;
    this.type = type;
    messageLabel.setForeground(type == ERROR_MES ? java.awt.Color.RED : null);
    messageLabel.setText(message);
    iconLabel.setIcon(getIcon(type));
    if (type == ERROR_MES)
      bht.tools.fx.CompAction.flash(getOwnerWindow(this), true);
    if (shouldScroll())
      scrollTimer.start();
    else
      scrollTimer.stop();
    if (prints)
      System.out.println(this);
    return this.toString();
  }


  /**
   * Alerts the user that a <tt>Throwable</tt> has been thrown. Similar to using <tt>alertOf(String message, byte type)</tt>
   * where the <tt>type</tt> is <tt>ERROR_MES</tt>, but with stack printing and conditional message filling
   * @param t the <tt>Throwable</tt> of which to alert the user
   * @return a <tt>String</tt> version of the alert.
   * @see bht.tools.comps.BHMessagePanel
   */
  @SuppressWarnings("UseOfSystemOutOrSystemErr")
  public String alertOf(Throwable t)
  {
    alertOf(t.getClass().getSimpleName() + (t.getMessage() != null && !t.getMessage().isEmpty() ? ": " + t.getMessage() : ""),
            t instanceof Error ? ERROR_MES : WARNING_MES);
    t.printStackTrace();
    return this.toString();
  }
  
  @Override
  public void setFont(java.awt.Font f)
  {
    super.setFont(f);
    if (messageLabel != null)
      messageLabel.setFont(f);
  }

  private void initScrollTimer()
  {
    scrollTimer = new javax.swing.Timer(100, new java.awt.event.ActionListener()
    {
      boolean b = true;
      int pos, lastPos;
      @Override
      public void actionPerformed(java.awt.event.ActionEvent e)
      {
        lastPos = messageLabelScrollPane.getHorizontalScrollBar().getModel().getValue();
        try
        {
          messageLabelScrollPane.getHorizontalScrollBar().getModel().setValue(messageLabelScrollPane.getHorizontalScrollBar().
                  getModel().getValue() + (b ? 1 : -1));
        }
        catch (NullPointerException ex)
        {
          System.err.println("Null pointer exception in bht.tools.comps.BHMessagePanel on line 282."
                  + " Probably has to do with the message panel bot having been shown, yet.");
        }

        pos = messageLabelScrollPane.getHorizontalScrollBar().getModel().getValue();
        
        if (pos == lastPos)
          b = !b;
      }
    });
  }
  
  /**
   * Sets whether the message should autoscroll left-to-right when it is too big to fit in the pane. If it is currently too big,
   * the message starts autoscrolling.<br/>
   * <br/>
   * This utilizes a <tt>javax.swing.Timer</tt> with a delay of 100 milliseconds between actions, where each action moves it
   * left or right by one pixel. Every time the component is resized, the panel object re-evaluates whether the timer should
   * be running, and stops it if there is no need. This should cut down on processor use.
   * @param flag a <tt>boolean</tt> that represents whether the message should autoscroll left-to-right when it is too big to
   * fit in the pane.
   */
  @Override
  public void setAutoscrolls(boolean flag)
  {
    autoscroll = flag;
    if (scrollTimer.isRunning() && !flag)
        scrollTimer.stop();
    else if (flag && shouldScroll())
      scrollTimer.start();
  }
  
  /**
   * Returns whether the message should autoscroll left-to-right when it is too big to fit in the pane.
   * @return a <tt>boolean</tt> that represents whether the message should autoscroll left-to-right when it is too big to fit in
   * the pane.
   */
  @Override
  public boolean getAutoscrolls()
  {
    return autoscroll;
  }
  
  /**
   * Returns whether the message should currently be autoscrolling left-to-right
   * @return a <tt>boolean</tt> that represents whether the message should currently be autoscrolling left-to-right
   */
  public boolean isAutoscrolling()
  {
    return shouldScroll();
  }

  /**
   * This sets the state of printing the message every time it changes. If true, the object will print its <tt>toString()</tt>
   * method every time an <tt>alertOf</tt> method is called.
   * @param shouldPrint whether console output should be enabled. Defaults to <tt>false</tt>.
   */
  public void setPrints(boolean shouldPrint)
  {
    prints = shouldPrint;
  }

  public boolean isPrints()
  {
    return prints;
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JScrollPane messageLabelScrollPane;
    private javax.swing.JSeparator messageSeparator;
    // End of variables declaration//GEN-END:variables
  private boolean autoscroll = true, prints = false;
  private byte type = PLAIN_MES;
  public static final byte
          PLAIN_MES = YesNoBox.PLAIN_MES,
          INFO_MES = YesNoBox.INFO_MES,
          QUESTION_MES = YesNoBox.QUESTION_MES,
          WARNING_MES = YesNoBox.WARNING_MES,
          ERROR_MES = YesNoBox.ERROR_MES;
  private String message = "Welcome!";
  private javax.swing.Timer scrollTimer;
}
