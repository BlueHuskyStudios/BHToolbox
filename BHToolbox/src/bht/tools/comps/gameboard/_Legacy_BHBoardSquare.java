/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * _Legacy_BHBoardSquare.java
 *
 * Created on Apr 13, 2011, 1:03:15 PM
 */
package bht.tools.comps.gameboard;

import bht.tools.fx.Colors;
import bht.tools.util.ArrayPP;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;

/**
 * A swing-style button whose point is to be a part of a collection of other objects of the same type in a <tt>BoardPanel</tt>
 * @deprecated Overly complex. Use {@link BHBoardSquare}, instead.
 * @author Supuhstar
 */
class _Legacy_BHBoardSquare extends /*javax.swing.AbstractButton*/javax.swing.JPanel
{
  /** Creates new form _Legacy_BHBoardSquare */
  public _Legacy_BHBoardSquare()
  {
    initComponents();
    actionListener = new ArrayPP<ActionListener>((ActionListener)null);
    mouseListener = new java.awt.event.MouseListener() 
    {
      public void mouseClicked(MouseEvent e)
      {
        if (actionListener != null)
          for (int i = 0; i < actionListener.length(); i++)
            if (actionListener.get(i) != null)
              actionListener.get(i).actionPerformed(new java.awt.event.ActionEvent(this, e.getID(), "BoardSquare clicked"));
      }

      public void mousePressed(MouseEvent e){}
      public void mouseReleased(MouseEvent e){}
      public void mouseEntered(MouseEvent e){}
      public void mouseExited(MouseEvent e){}
    };
    
    fixActionListenerIn(getThis());
//    new Colors().fixStyleIn(getThis());
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    topLeftBorder = new javax.swing.JLabel();
    topBorder = new javax.swing.JLabel();
    topRightBorder = new javax.swing.JLabel();
    leftBorder = new javax.swing.JLabel();
    center = new javax.swing.JLabel();
    rightBorder = new javax.swing.JLabel();
    bottomLeftBorder = new javax.swing.JLabel();
    bottomBorder = new javax.swing.JLabel();
    bottomRightBorder = new javax.swing.JLabel();

    setLayout(new java.awt.GridBagLayout());

    topLeftBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(topLeftBorder, gridBagConstraints);
    topLeftBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    topBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(topBorder, gridBagConstraints);
    topBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    topRightBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(topRightBorder, gridBagConstraints);
    topRightBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    leftBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(leftBorder, gridBagConstraints);
    leftBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    center.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(center, gridBagConstraints);

    rightBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(rightBorder, gridBagConstraints);
    rightBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    bottomLeftBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(bottomLeftBorder, gridBagConstraints);
    bottomLeftBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    bottomBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(bottomBorder, gridBagConstraints);
    bottomBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);

    bottomRightBorder.setOpaque(true);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 1;
    gridBagConstraints.ipady = 1;
    add(bottomRightBorder, gridBagConstraints);
    bottomRightBorder.getAccessibleContext().setAccessibleDescription(Colors.COLOR_PART_OVERRIDE + Colors.BORDER + Colors.COMMAND_SEP);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel bottomBorder;
  private javax.swing.JLabel bottomLeftBorder;
  private javax.swing.JLabel bottomRightBorder;
  private javax.swing.JLabel center;
  private javax.swing.JLabel leftBorder;
  private javax.swing.JLabel rightBorder;
  private javax.swing.JLabel topBorder;
  private javax.swing.JLabel topLeftBorder;
  private javax.swing.JLabel topRightBorder;
  // End of variables declaration//GEN-END:variables
  private ArrayPP<java.awt.event.ActionListener> actionListener;
  private java.awt.event.MouseListener mouseListener;
  
  /** Represents the topmost boundary of the cell */
  public static final byte TOP = 0x0;
  /** Represents the rightmost boundary of the cell */
  public static final byte RIGHT = 0x1;
  /** Represents the bottommost boundary of the cell */
  public static final byte BOTTOM = 0x2;
  /** Represents the leftmost boundary of the cell */
  public static final byte LEFT = 0x3;
  /** The prefix applied to the text in the square. It is removed before returning the result of <tt>getText()</tt> */
  public static final String PREFIX = "<html>";
  
  private void fixActionListenerIn(java.awt.Component c)
  {
    if (c instanceof java.awt.Container)
      for (int i = 0; i < ((java.awt.Container) c).getComponentCount(); i++)
        fixActionListenerIn(((java.awt.Container) c).getComponent(i));
    c.addMouseListener(mouseListener);
  }

//  @Override
  public void addActionListener(java.awt.event.ActionListener al)
  {
    actionListener.add(al);
  }

  /**
   * Removes the first found instance of the provided <tt>java.awt.event.ActionListener</tt>
   * @param al the <tt>java.awt.event.ActionListener</tt> to be removed
   */
//  @Override
  public void removeActionListener(java.awt.event.ActionListener al)
  {
    actionListener.remove(al, false);
  }

  /**
   * Performs all actions that this square has been told to do
   * @param event the event parameters to pass to each <tt>java.awt.event.ActionListener</tt> when its <tt>actionPerformed</tt>
   * method is called
   */
  protected void fireActionPerformed(ActionEvent event)
  {
    for (int i = 0; i < actionListener.length(); i++)
      actionListener.get(i).actionPerformed(event);
  }

  private _Legacy_BHBoardSquare getThis()
  {
    return this;
  }
  
  /**
   * Performs a click action on the square
   */
  public void doClick()
  {
    fireActionPerformed(new java.awt.event.ActionEvent(null, 0, "doClick()"));
  }

  /**
   * Sets the text in the cell
   * @param text the new text of the cell
   */
  public void setText(String text)
  {
    center.setText(PREFIX + text);
  }
  
  /**
   * Returns the text in the square
   * @return the text in the square
   */
  public String getText()
  {
    return center.getText().substring(PREFIX.length(), center.getText().length());
  }

  /**
   * Opens a side of the cell
   * @param sideMask a <tt>byte</tt> mask represented by one of the provided constants (<tt>TOP</tt>, <tt>LEFT</tt>,
   * <tt>BOTTOM</tt>, and <tt>RIGHT</tt>)
   * @deprecated Please use the <tt>openSquare</tt> method in the <tt>BoardPanel</tt> object containing this <tt>_Legacy_BHBoardSquare</tt>
   */
  public void openSide(byte sideMask)
  {
    switch(sideMask)
    {
      case TOP:
        topBorder.setOpaque(false);
        break;
      case RIGHT:
        rightBorder.setOpaque(false);
        break;
      case BOTTOM:
        bottomBorder.setOpaque(false);
        break;
      case LEFT:
        leftBorder.setOpaque(false);
        break;
      default:
        throw new IllegalArgumentException("Illegal byte mask: " + sideMask);
    }
    
    topLeftBorder.setOpaque(topBorder.isOpaque() || leftBorder.isOpaque());
    topRightBorder.setOpaque(topBorder.isOpaque() || rightBorder.isOpaque());
    bottomLeftBorder.setOpaque(bottomBorder.isOpaque() || leftBorder.isOpaque());
    bottomRightBorder.setOpaque(bottomBorder.isOpaque() || rightBorder.isOpaque());
    
    repaint();
  }
}
