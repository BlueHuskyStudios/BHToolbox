package bht.test;

import bht.tools.comps.BHFrame;
import bht.tools.comps.BHPasswordField;
import bht.tools.comps.BHSpinner;
import bht.tools.comps.BHTextField;
import bht.tools.comps.gameboard.BHBoardPanel;
import bht.tools.comps.gameboard.BHBoardSquare;
import bht.tools.fx.Colors;
import bht.tools.fx.CompAction;
import bht.tools.misc.YesNoBox;
import bht.tools.util.ArrayPP;
import bht.tools.util.ArrayTable;
import bht.tools.util.Copier;
import bht.tools.util.HistoryArray;

/**
 * <strong>Copyright Blue Husky Programming, Â© 2011</strong><br/>
 *
 * @author Supuhstar
 */
public class TestBHFrame extends BHFrame
{

  private static class _Legacy_BHBoardPanel extends BHBoardPanel
  {
    public _Legacy_BHBoardPanel(int i, int i0)
    {
      super(i, i0);
    }
  }
  /** Creates new form TestBHFrame */
  public TestBHFrame()
  {
    initComponents();
    setSize(512, 512);
//    CompAction.center(this);

    testAPP = new ArrayPP<String>("This", "is", "the", "example", "of", "ArrayPP!", "Re-live", "the", "real", "life", "version",
            "of", "recreational", "areas!");

    testHA = new HistoryArray<String>("This", "is", "the", "example", "of", "HistoryArray!", "Help", "Pheobe", "telephonically",
            "denote", "pheremones", "in", "Physics!");
    testHA.goTo(6);

    testAT = new ArrayTable<String>(new ArrayPP<ArrayPP<String>>(
            new ArrayPP<String>("0,0", "0,1", "0,2", "0,3", "0,4"),
            new ArrayPP<String>("1,0", "1,1", "1,2", "1,3", "1,4"),
            new ArrayPP<String>("2,0", "2,1", "2,2", "2,3", "2,4"),
            new ArrayPP<String>("3,0", "3,1", "3,2", "3,3", "3,4"),
            new ArrayPP<String>("4,0", "4,1", "4,2", "4,3", "4,4")));
    refillTestAPPDisplayList();
    fixHistArrayLists();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING_MES: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    bht_tools_compsTabbedPane = new javax.swing.JTabbedPane();
    gameboardTabbedPane = new javax.swing.JTabbedPane();
    jPanel59 = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    BoardPanelSetupPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    BoardPanelOpenSquareXSpinner = new BHSpinner();
    jLabel108 = new javax.swing.JLabel();
    BoardPanelOpenSquareYSpinner = new BHSpinner();
    jLabel109 = new javax.swing.JLabel();
    jLabel110 = new javax.swing.JLabel();
    jLabel111 = new javax.swing.JLabel();
    jSpinner8 = new BHSpinner();
    jLabel112 = new javax.swing.JLabel();
    jSpinner9 = new BHSpinner();
    jLabel113 = new javax.swing.JLabel();
    jButton40 = new javax.swing.JButton();
    jButton41 = new javax.swing.JButton();
    BoardPanelOpenSquareDirectionComboBox = new javax.swing.JComboBox();
    jPanel60 = new javax.swing.JPanel();
    BoardPanelPanel = new _Legacy_BHBoardPanel(8,8);
    BHFrameLabel = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    alertOfMessagePanel = new javax.swing.JPanel();
    alertOfMessageTextField = new BHTextField("message");
    alertOfMessageTypeComboBox = new javax.swing.JComboBox();
    alertOfMessageButton = new javax.swing.JButton();
    jLabel81 = new javax.swing.JLabel();
    alertOfThrowablePanel = new javax.swing.JPanel();
    alertOfThrowableTextField = new BHTextField("Throwable's message");
    alertOfThrowableComboBox = new javax.swing.JComboBox();
    alertOfThrowableButton = new javax.swing.JButton();
    jLabel82 = new javax.swing.JLabel();
    jButton3 = new javax.swing.JButton();
    jPanel3 = new javax.swing.JPanel();
    bhPasswordFieldTipTextField = new BHTextField("setTipText(String tipText)");
    bhPasswordField = new BHPasswordField("Type your password here");
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel83 = new javax.swing.JLabel();
    jPanel4 = new javax.swing.JPanel();
    bhTextFieldTipTextField = new BHTextField("setTipText(String tipText)");
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    bhTextField = new BHTextField("Type your text here");
    jLabel84 = new javax.swing.JLabel();
    jPanel5 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jPanel42 = new javax.swing.JPanel();
    bhSpinnerToolTipTextField = new BHTextField("toolTipText");
    jLabel86 = new javax.swing.JLabel();
    jLabel87 = new javax.swing.JLabel();
    jLabel88 = new javax.swing.JLabel();
    bhSpinner = new BHSpinner();
    bht_tools_effectsTabbedPane = new javax.swing.JTabbedPane();
    jPanel6 = new javax.swing.JPanel();
    colorsStyleComboBox = new javax.swing.JComboBox();
    colorsPartComboBox = new javax.swing.JComboBox();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    setColorStylePartPanel = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    jTextField1 = new BHTextField("Hexadecimal String");
    jLabel10 = new javax.swing.JLabel();
    setColorHexPanel = new javax.swing.JPanel();
    jLabel85 = new javax.swing.JLabel();
    jPanel7 = new javax.swing.JPanel();
    jTabbedPane4 = new javax.swing.JTabbedPane();
    jPanel11 = new javax.swing.JPanel();
    jPanel8 = new javax.swing.JPanel();
    jLabel12 = new javax.swing.JLabel();
    bht_tools_miscTabbedPane = new javax.swing.JTabbedPane();
    jPanel9 = new javax.swing.JPanel();
    jLabel11 = new javax.swing.JLabel();
    yesNoBoxBoolPromptTextField2 = new BHTextField("message");
    jLabel13 = new javax.swing.JLabel();
    yesNoBoxBoolTitleTextField = new BHTextField("title");
    jLabel19 = new javax.swing.JLabel();
    yesNoBoxBoolTypeComboBox = new javax.swing.JComboBox();
    jLabel20 = new javax.swing.JLabel();
    jButton2 = new javax.swing.JButton();
    jLabel21 = new javax.swing.JLabel();
    yesNoBoxIntegerPromptTextField1 = new BHTextField("message");
    jLabel24 = new javax.swing.JLabel();
    jButton4 = new javax.swing.JButton();
    jLabel25 = new javax.swing.JLabel();
    yesNoBoxBoolPromptTextField1 = new BHTextField("message");
    jLabel28 = new javax.swing.JLabel();
    jButton5 = new javax.swing.JButton();
    jLabel29 = new javax.swing.JLabel();
    yesNoBoxIntegerPromptTextField2 = new BHTextField("message");
    jLabel30 = new javax.swing.JLabel();
    yesNoBoxIntegerTitleTextField = new BHTextField("title");
    jLabel31 = new javax.swing.JLabel();
    yesNoBoxIntegerTypeComboBox = new javax.swing.JComboBox();
    jLabel32 = new javax.swing.JLabel();
    jButton6 = new javax.swing.JButton();
    yesNoBoxResultLocationLabel = new javax.swing.JLabel();
    bht_tools_utilitiesTabbedPane = new javax.swing.JTabbedPane();
    jPanel16 = new javax.swing.JPanel();
    jPanel18 = new javax.swing.JPanel();
    arrayPPRereadButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    arrayPPList = new javax.swing.JList();
    jTabbedPane8 = new javax.swing.JTabbedPane();
    jPanel17 = new javax.swing.JPanel();
    jLabel17 = new javax.swing.JLabel();
    arrayPPAddTextField = new BHTextField("String item");
    jLabel22 = new javax.swing.JLabel();
    jButton7 = new javax.swing.JButton();
    jLabel38 = new javax.swing.JLabel();
    jPanel19 = new javax.swing.JPanel();
    jLabel27 = new javax.swing.JLabel();
    jTextField2 = new BHTextField("item");
    jLabel33 = new javax.swing.JLabel();
    jButton8 = new javax.swing.JButton();
    jLabel34 = new javax.swing.JLabel();
    jPanel31 = new javax.swing.JPanel();
    jLabel59 = new javax.swing.JLabel();
    arrayPPCompareToTextField = new BHTextField("items");
    jLabel60 = new javax.swing.JLabel();
    arrayPPCompareToButton = new javax.swing.JButton();
    jLabel61 = new javax.swing.JLabel();
    jPanel28 = new javax.swing.JPanel();
    jButton16 = new javax.swing.JButton();
    jPanel20 = new javax.swing.JPanel();
    jLabel35 = new javax.swing.JLabel();
    jPanel21 = new javax.swing.JPanel();
    jLabel36 = new javax.swing.JLabel();
    jTextField3 = new BHTextField("val");
    jLabel37 = new javax.swing.JLabel();
    jButton9 = new javax.swing.JButton();
    jPanel22 = new javax.swing.JPanel();
    jLabel39 = new javax.swing.JLabel();
    jTextField4 = new BHTextField("val");
    jLabel40 = new javax.swing.JLabel();
    jButton10 = new javax.swing.JButton();
    jPanel23 = new javax.swing.JPanel();
    jLabel41 = new javax.swing.JLabel();
    jSpinner1 = new BHSpinner();
    jLabel42 = new javax.swing.JLabel();
    jButton11 = new javax.swing.JButton();
    jPanel24 = new javax.swing.JPanel();
    jLabel43 = new javax.swing.JLabel();
    arrayPPGetIndicesOfTextField = new BHTextField("val");
    jLabel44 = new javax.swing.JLabel();
    jButton12 = new javax.swing.JButton();
    jPanel25 = new javax.swing.JPanel();
    jLabel45 = new javax.swing.JLabel();
    arrayPPGetIndexOfTextField = new BHTextField("val");
    jLabel46 = new javax.swing.JLabel();
    jButton13 = new javax.swing.JButton();
    jPanel26 = new javax.swing.JPanel();
    jLabel47 = new javax.swing.JLabel();
    arrayPPGetLastIndexOfTextField = new BHTextField("val");
    jLabel48 = new javax.swing.JLabel();
    jButton14 = new javax.swing.JButton();
    jPanel27 = new javax.swing.JPanel();
    jLabel49 = new javax.swing.JLabel();
    arrayPPHasNotTextField = new BHTextField("items");
    jLabel50 = new javax.swing.JLabel();
    jButton15 = new javax.swing.JButton();
    jLabel51 = new javax.swing.JLabel();
    jPanel29 = new javax.swing.JPanel();
    jLabel52 = new javax.swing.JLabel();
    arrayPPInsertValTextField = new BHTextField("val");
    jLabel53 = new javax.swing.JLabel();
    arrayPPInsertIndexSpinner = new BHSpinner();
    jLabel54 = new javax.swing.JLabel();
    arrayPPInsertButton = new javax.swing.JButton();
    jLabel55 = new javax.swing.JLabel();
    jPanel32 = new javax.swing.JPanel();
    jButton17 = new javax.swing.JButton();
    jPanel30 = new javax.swing.JPanel();
    jLabel56 = new javax.swing.JLabel();
    arrayPPIsolateTextField = new BHTextField("items");
    jLabel57 = new javax.swing.JLabel();
    arrayPPIsolateButton = new javax.swing.JButton();
    jLabel58 = new javax.swing.JLabel();
    jPanel33 = new javax.swing.JPanel();
    jButton18 = new javax.swing.JButton();
    jPanel34 = new javax.swing.JPanel();
    jLabel26 = new javax.swing.JLabel();
    arrayPPRemoveTextField = new BHTextField("val");
    jLabel62 = new javax.swing.JLabel();
    jButton19 = new javax.swing.JButton();
    jLabel63 = new javax.swing.JLabel();
    jLabel64 = new javax.swing.JLabel();
    arrayPPRemoveAllCheckBox = new javax.swing.JCheckBox();
    jLabel65 = new javax.swing.JLabel();
    arrayPPRemoveSpinner = new BHSpinner();
    jLabel67 = new javax.swing.JLabel();
    jButton20 = new javax.swing.JButton();
    jPanel35 = new javax.swing.JPanel();
    jLabel66 = new javax.swing.JLabel();
    arrayPPReplaceTextField2 = new BHTextField("val");
    jLabel68 = new javax.swing.JLabel();
    jButton21 = new javax.swing.JButton();
    jLabel69 = new javax.swing.JLabel();
    jLabel70 = new javax.swing.JLabel();
    arrayPPReplaceAllCheckBox = new javax.swing.JCheckBox();
    arrayPPReplaceTextField1 = new BHTextField("val");
    jLabel73 = new javax.swing.JLabel();
    jPanel36 = new javax.swing.JPanel();
    jLabel71 = new javax.swing.JLabel();
    arrayPPSetValTextField = new BHTextField("val");
    jLabel72 = new javax.swing.JLabel();
    arrayPPSetIndexSpinner = new BHSpinner();
    jLabel74 = new javax.swing.JLabel();
    arrayPPSetButton = new javax.swing.JButton();
    jPanel37 = new javax.swing.JPanel();
    jLabel75 = new javax.swing.JLabel();
    jLabel76 = new javax.swing.JLabel();
    arrayPPSubSetEndIndexSpinner = new BHSpinner();
    jLabel77 = new javax.swing.JLabel();
    arrayPPSubSetButton = new javax.swing.JButton();
    arrayPPSubSetBeginIndexSpinner = new BHSpinner();
    jPanel38 = new javax.swing.JPanel();
    jLabel78 = new javax.swing.JLabel();
    jLabel79 = new javax.swing.JLabel();
    arrayPPSwapIndex2Spinner = new BHSpinner();
    jLabel80 = new javax.swing.JLabel();
    arrayPPSwapButton = new javax.swing.JButton();
    arrayPPSwapIndex1Spinner = new BHSpinner();
    jPanel39 = new javax.swing.JPanel();
    jButton22 = new javax.swing.JButton();
    jPanel40 = new javax.swing.JPanel();
    jButton23 = new javax.swing.JButton();
    jPanel41 = new javax.swing.JPanel();
    jButton24 = new javax.swing.JButton();
    jLabel23 = new javax.swing.JLabel();
    jPanel56 = new javax.swing.JPanel();
    jPanel57 = new javax.swing.JPanel();
    arrayPPRereadButton1 = new javax.swing.JButton();
    jScrollPane6 = new javax.swing.JScrollPane();
    jTable1 = new javax.swing.JTable();
    jLabel160 = new javax.swing.JLabel();
    jTabbedPane10 = new javax.swing.JTabbedPane();
    jPanel58 = new javax.swing.JPanel();
    jButton39 = new javax.swing.JButton();
    jPanel12 = new javax.swing.JPanel();
    jTabbedPane7 = new javax.swing.JTabbedPane();
    jPanel43 = new javax.swing.JPanel();
    jLabel91 = new javax.swing.JLabel();
    copierCopyTextField = new BHTextField("text to copy");
    jLabel92 = new javax.swing.JLabel();
    jButton26 = new javax.swing.JButton();
    jPanel44 = new javax.swing.JPanel();
    jLabel14 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    copierSearchToCopyInTextArea = new javax.swing.JTextArea();
    jLabel89 = new javax.swing.JLabel();
    jButton25 = new javax.swing.JButton();
    jLabel90 = new javax.swing.JLabel();
    jPanel13 = new javax.swing.JPanel();
    jTabbedPane9 = new javax.swing.JTabbedPane();
    jPanel45 = new javax.swing.JPanel();
    jLabel96 = new javax.swing.JLabel();
    HistoryArrayAddTextField = new BHTextField("item");
    jLabel97 = new javax.swing.JLabel();
    jButton27 = new javax.swing.JButton();
    jPanel46 = new javax.swing.JPanel();
    jLabel98 = new javax.swing.JLabel();
    jTextField6 = new BHTextField("item");
    jLabel99 = new javax.swing.JLabel();
    jButton28 = new javax.swing.JButton();
    jPanel47 = new javax.swing.JPanel();
    jButton29 = new javax.swing.JButton();
    jPanel48 = new javax.swing.JPanel();
    jButton30 = new javax.swing.JButton();
    jPanel49 = new javax.swing.JPanel();
    jLabel100 = new javax.swing.JLabel();
    historyArrayCanGoToSpinner = new BHSpinner();
    jLabel101 = new javax.swing.JLabel();
    jButton31 = new javax.swing.JButton();
    jPanel50 = new javax.swing.JPanel();
    jLabel102 = new javax.swing.JLabel();
    jSpinner2 = new BHSpinner();
    jLabel103 = new javax.swing.JLabel();
    jButton32 = new javax.swing.JButton();
    jPanel51 = new javax.swing.JPanel();
    jButton33 = new javax.swing.JButton();
    jPanel52 = new javax.swing.JPanel();
    jLabel104 = new javax.swing.JLabel();
    jSpinner3 = new BHSpinner();
    jLabel105 = new javax.swing.JLabel();
    jButton34 = new javax.swing.JButton();
    jPanel53 = new javax.swing.JPanel();
    jLabel106 = new javax.swing.JLabel();
    jSpinner4 = new BHSpinner();
    jLabel107 = new javax.swing.JLabel();
    jButton35 = new javax.swing.JButton();
    jPanel54 = new javax.swing.JPanel();
    jButton36 = new javax.swing.JButton();
    jPanel55 = new javax.swing.JPanel();
    jButton37 = new javax.swing.JButton();
    jScrollPane3 = new javax.swing.JScrollPane();
    historyArrayGetBackHistList = new javax.swing.JList();
    jScrollPane4 = new javax.swing.JScrollPane();
    historyArrayGetNextHistList = new javax.swing.JList();
    jLabel15 = new javax.swing.JLabel();
    jLabel93 = new javax.swing.JLabel();
    jLabel94 = new javax.swing.JLabel();
    jScrollPane5 = new javax.swing.JScrollPane();
    historyArrayGetFullHistList = new javax.swing.JList();
    jLabel95 = new javax.swing.JLabel();
    historyArrayCurrentItemLabel = new javax.swing.JLabel();
    jButton38 = new javax.swing.JButton();
    jPanel14 = new javax.swing.JPanel();
    jLabel16 = new javax.swing.JLabel();
    jPanel15 = new javax.swing.JPanel();
    jLabel18 = new javax.swing.JLabel();
    jPanel10 = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Tester for " + TITLE + " version " + VERSION);
    setMinimumSize(new java.awt.Dimension(512, 256));
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel1.setLayout(new java.awt.BorderLayout());

    jPanel59.setLayout(new java.awt.BorderLayout());

    BoardPanelSetupPanel.setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("openSquare(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    BoardPanelSetupPanel.add(jLabel1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(BoardPanelOpenSquareXSpinner, gridBagConstraints);

    jLabel108.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(jLabel108, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(BoardPanelOpenSquareYSpinner, gridBagConstraints);

    jLabel109.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(jLabel109, gridBagConstraints);

    jLabel110.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    BoardPanelSetupPanel.add(jLabel110, gridBagConstraints);

    jLabel111.setText("setBoardSize(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    BoardPanelSetupPanel.add(jLabel111, gridBagConstraints);

    jSpinner8.setToolTipText("width");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(jSpinner8, gridBagConstraints);

    jLabel112.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(jLabel112, gridBagConstraints);

    jSpinner9.setToolTipText("height");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    BoardPanelSetupPanel.add(jSpinner9, gridBagConstraints);

    jLabel113.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    BoardPanelSetupPanel.add(jLabel113, gridBagConstraints);

    jButton40.setText("Set it!");
    jButton40.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton40ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 0;
    BoardPanelSetupPanel.add(jButton40, gridBagConstraints);

    jButton41.setText("Open it!");
    jButton41.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton41ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 1;
    BoardPanelSetupPanel.add(jButton41, gridBagConstraints);

    BoardPanelOpenSquareDirectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TOP", "RIGHT", "BOTTOM", "LEFT" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 1;
    BoardPanelSetupPanel.add(BoardPanelOpenSquareDirectionComboBox, gridBagConstraints);

    jSplitPane1.setLeftComponent(BoardPanelSetupPanel);

    jPanel60.setLayout(new java.awt.BorderLayout());
    jPanel60.add(BoardPanelPanel, java.awt.BorderLayout.CENTER);

    jSplitPane1.setRightComponent(jPanel60);

    jPanel59.add(jSplitPane1, java.awt.BorderLayout.CENTER);

    gameboardTabbedPane.addTab("BoardPanel", jPanel59);

    bht_tools_compsTabbedPane.addTab("gameboard", gameboardTabbedPane);

    BHFrameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    BHFrameLabel.setText("This program is encased in a BHFrame");
    bht_tools_compsTabbedPane.addTab("BHFrame", BHFrameLabel);

    jPanel2.setLayout(new java.awt.GridBagLayout());

    alertOfMessagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("alertOf(String message [, byte type]);"));
    alertOfMessagePanel.setLayout(new java.awt.GridBagLayout());

    alertOfMessageTextField.setMinimumSize(new java.awt.Dimension(128, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfMessagePanel.add(alertOfMessageTextField, gridBagConstraints);

    alertOfMessageTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLAIN_MES", "INFO_MES", "QUESTION_MeS", "WARNING_MES", "ERROR_MES" }));
    alertOfMessageTypeComboBox.setMinimumSize(getPreferredSize());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfMessagePanel.add(alertOfMessageTypeComboBox, gridBagConstraints);

    alertOfMessageButton.setText("Alert");
    alertOfMessageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        alertOfMessageButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfMessagePanel.add(alertOfMessageButton, gridBagConstraints);

    jLabel81.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel81.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    alertOfMessagePanel.add(jLabel81, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel2.add(alertOfMessagePanel, gridBagConstraints);

    alertOfThrowablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("alertOf(Throwable t);"));
    alertOfThrowablePanel.setLayout(new java.awt.GridBagLayout());

    alertOfThrowableTextField.setMinimumSize(new java.awt.Dimension(128, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfThrowablePanel.add(alertOfThrowableTextField, gridBagConstraints);

    alertOfThrowableComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Throwable", "Error", "Exception", "ArrayIndexOutOfBoundsException", "OutOfMemoryError" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfThrowablePanel.add(alertOfThrowableComboBox, gridBagConstraints);

    alertOfThrowableButton.setText("Throw, catch, and alert");
    alertOfThrowableButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        alertOfThrowableButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    alertOfThrowablePanel.add(alertOfThrowableButton, gridBagConstraints);

    jLabel82.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel82.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    alertOfThrowablePanel.add(jLabel82, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel2.add(alertOfThrowablePanel, gridBagConstraints);

    jButton3.setText("clear();");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel2.add(jButton3, gridBagConstraints);

    bht_tools_compsTabbedPane.addTab("BHMessagePanel", jPanel2);

    jPanel3.setLayout(new java.awt.GridBagLayout());

    bhPasswordFieldTipTextField.setText("Type your password here");
    bhPasswordFieldTipTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        bhPasswordFieldTipTextFieldKeyReleased(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
    jPanel3.add(bhPasswordFieldTipTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
    jPanel3.add(bhPasswordField, gridBagConstraints);

    jLabel2.setText("setTipText(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 2);
    jPanel3.add(jLabel2, gridBagConstraints);

    jLabel3.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 8);
    jPanel3.add(jLabel3, gridBagConstraints);

    jLabel83.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel83.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    jPanel3.add(jLabel83, gridBagConstraints);

    bht_tools_compsTabbedPane.addTab("BHPasswordField", jPanel3);

    jPanel4.setLayout(new java.awt.GridBagLayout());

    bhTextFieldTipTextField.setText("Type your text here");
    bhTextFieldTipTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        bhTextFieldTipTextFieldKeyReleased(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
    jPanel4.add(bhTextFieldTipTextField, gridBagConstraints);

    jLabel4.setText("setTipText(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 2);
    jPanel4.add(jLabel4, gridBagConstraints);

    jLabel5.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 8);
    jPanel4.add(jLabel5, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
    jPanel4.add(bhTextField, gridBagConstraints);

    jLabel84.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel84.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    jPanel4.add(jLabel84, gridBagConstraints);

    bht_tools_compsTabbedPane.addTab("BHTextField", jPanel4);

    jButton1.setText("Open edit panel");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    jPanel5.add(jButton1);

    bht_tools_compsTabbedPane.addTab("CustColorsEditPanel", jPanel5);

    jPanel42.setLayout(new java.awt.GridBagLayout());

    bhSpinnerToolTipTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        bhSpinnerToolTipTextFieldKeyReleased(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
    jPanel42.add(bhSpinnerToolTipTextField, gridBagConstraints);

    jLabel86.setText("setToolTipText(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 2);
    jPanel42.add(jLabel86, gridBagConstraints);

    jLabel87.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 8);
    jPanel42.add(jLabel87, gridBagConstraints);

    jLabel88.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel88.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    jPanel42.add(jLabel88, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel42.add(bhSpinner, gridBagConstraints);

    bht_tools_compsTabbedPane.addTab("BHSpinner", jPanel42);

    jTabbedPane1.addTab("bht.tools.comps", bht_tools_compsTabbedPane);

    jPanel6.setLayout(new java.awt.GridBagLayout());

    colorsStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MOCHA", "HUSKY", "ASTRO", "CUSTOM", "NULL" }));
    colorsStyleComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorsStyleComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    jPanel6.add(colorsStyleComboBox, gridBagConstraints);

    colorsPartComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BACK", "BORDER", "BOX", "TEXT", "TEXT_AREA" }));
    colorsPartComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorsPartComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    jPanel6.add(colorsPartComboBox, gridBagConstraints);

    jLabel6.setText("getColor(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    jPanel6.add(jLabel6, gridBagConstraints);

    jLabel7.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    jPanel6.add(jLabel7, gridBagConstraints);

    jLabel8.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    jPanel6.add(jLabel8, gridBagConstraints);

    setColorStylePartPanel.setBackground(getColors().getColor(Colors.MOCHA, Colors.BACK));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel6.add(setColorStylePartPanel, gridBagConstraints);

    jLabel9.setText("getColor(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    jPanel6.add(jLabel9, gridBagConstraints);

    jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jTextField1KeyReleased(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weighty = 1.0;
    jPanel6.add(jTextField1, gridBagConstraints);

    jLabel10.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 1;
    jPanel6.add(jLabel10, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    jPanel6.add(setColorHexPanel, gridBagConstraints);

    jLabel85.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel85.setText("<html>(Typing <tt>null</tt> will send a null value)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    jPanel6.add(jLabel85, gridBagConstraints);

    bht_tools_effectsTabbedPane.addTab("Colors", jPanel6);

    jPanel7.setLayout(new java.awt.BorderLayout());

    jTabbedPane4.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
    jTabbedPane4.setTabPlacement(javax.swing.JTabbedPane.LEFT);
    jTabbedPane4.addTab("To Do", jPanel11);

    jPanel7.add(jTabbedPane4, java.awt.BorderLayout.CENTER);

    bht_tools_effectsTabbedPane.addTab("CompAction", jPanel7);

    jLabel12.setText("To Do");
    jPanel8.add(jLabel12);

    bht_tools_effectsTabbedPane.addTab("LookAndFeelChanger", jPanel8);

    jTabbedPane1.addTab("bht.tools.effects", bht_tools_effectsTabbedPane);

    jPanel9.setLayout(new java.awt.GridBagLayout());

    jLabel11.setText("bool(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    jPanel9.add(jLabel11, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxBoolPromptTextField2, gridBagConstraints);

    jLabel13.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    jPanel9.add(jLabel13, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxBoolTitleTextField, gridBagConstraints);

    jLabel19.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    jPanel9.add(jLabel19, gridBagConstraints);

    yesNoBoxBoolTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLAIN_MES", "INFO_MES", "QUESTION_MES", "WARNING_MES", "ERROR_MES", "DEF_MES" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxBoolTypeComboBox, gridBagConstraints);

    jLabel20.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel9.add(jLabel20, gridBagConstraints);

    jButton2.setText("Display it!");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 2;
    jPanel9.add(jButton2, gridBagConstraints);

    jLabel21.setText("integer(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    jPanel9.add(jLabel21, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxIntegerPromptTextField1, gridBagConstraints);

    jLabel24.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel9.add(jLabel24, gridBagConstraints);

    jButton4.setText("Display it!");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 3;
    jPanel9.add(jButton4, gridBagConstraints);

    jLabel25.setText("bool(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    jPanel9.add(jLabel25, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxBoolPromptTextField1, gridBagConstraints);

    jLabel28.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel9.add(jLabel28, gridBagConstraints);

    jButton5.setText("Display it!");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton5ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 1;
    jPanel9.add(jButton5, gridBagConstraints);

    jLabel29.setText("integer(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    jPanel9.add(jLabel29, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxIntegerPromptTextField2, gridBagConstraints);

    jLabel30.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    jPanel9.add(jLabel30, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxIntegerTitleTextField, gridBagConstraints);

    jLabel31.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 4;
    jPanel9.add(jLabel31, gridBagConstraints);

    yesNoBoxIntegerTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLAIN_MES", "INFO_MES", "QUESTION_MES", "WARNING_MES", "ERROR_MES", "DEF_MES" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel9.add(yesNoBoxIntegerTypeComboBox, gridBagConstraints);

    jLabel32.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel9.add(jLabel32, gridBagConstraints);

    jButton6.setText("Display it!");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton6ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 4;
    jPanel9.add(jButton6, gridBagConstraints);

    yesNoBoxResultLocationLabel.setText("Results will appear in the message pane below");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 8;
    jPanel9.add(yesNoBoxResultLocationLabel, gridBagConstraints);

    bht_tools_miscTabbedPane.addTab("YesNoBox", jPanel9);

    jTabbedPane1.addTab("bht.tools.misc", bht_tools_miscTabbedPane);

    bht_tools_utilitiesTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        bht_tools_utilitiesTabbedPaneStateChanged(evt);
      }
    });

    jPanel16.setLayout(new java.awt.BorderLayout(4, 4));

    jPanel18.setLayout(new java.awt.BorderLayout());

    arrayPPRereadButton.setText("Re-read Array");
    arrayPPRereadButton.setEnabled(false);
    arrayPPRereadButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPRereadButtonActionPerformed(evt);
      }
    });
    jPanel18.add(arrayPPRereadButton, java.awt.BorderLayout.NORTH);

    arrayPPList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "This", "is", "the", "example", "of", "ArrayPP!", "Re-live", "the", "real", "life", "version", "of", "recreational", "areas!" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jScrollPane1.setViewportView(arrayPPList);

    jPanel18.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jPanel16.add(jPanel18, java.awt.BorderLayout.EAST);

    jTabbedPane8.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
    jTabbedPane8.setTabPlacement(javax.swing.JTabbedPane.LEFT);

    jPanel17.setLayout(new java.awt.GridBagLayout());

    jLabel17.setText("add(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel17.add(jLabel17, gridBagConstraints);

    arrayPPAddTextField.setFont(new java.awt.Font("Monospaced", 0, 11));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel17.add(arrayPPAddTextField, gridBagConstraints);

    jLabel22.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel17.add(jLabel22, gridBagConstraints);

    jButton7.setText("Add it!");
    jButton7.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton7ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel17.add(jButton7, gridBagConstraints);

    jLabel38.setText("<html>(typing <tt>null</tt> will insert a null value into the array. Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel17.add(jLabel38, gridBagConstraints);

    jTabbedPane8.addTab("add", jPanel17);

    jPanel19.setLayout(new java.awt.GridBagLayout());

    jLabel27.setText("contains(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel19.add(jLabel27, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel19.add(jTextField2, gridBagConstraints);

    jLabel33.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel19.add(jLabel33, gridBagConstraints);

    jButton8.setText("Does it contain this?");
    jButton8.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton8ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel19.add(jButton8, gridBagConstraints);

    jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel34.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel19.add(jLabel34, gridBagConstraints);

    jTabbedPane8.addTab("contains", jPanel19);

    jPanel31.setLayout(new java.awt.GridBagLayout());

    jLabel59.setText("compareTo(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel31.add(jLabel59, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel31.add(arrayPPCompareToTextField, gridBagConstraints);

    jLabel60.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel31.add(jLabel60, gridBagConstraints);

    arrayPPCompareToButton.setText("Compare them!");
    arrayPPCompareToButton.setToolTipText("Find out whether the array++ contains anything but the specified items");
    arrayPPCompareToButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPCompareToButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel31.add(arrayPPCompareToButton, gridBagConstraints);

    jLabel61.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    jPanel31.add(jLabel61, gridBagConstraints);

    jTabbedPane8.addTab("compareTo", jPanel31);

    jButton16.setText("clear();");
    jButton16.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton16ActionPerformed(evt);
      }
    });
    jPanel28.add(jButton16);

    jTabbedPane8.addTab("clear", jPanel28);

    jPanel20.setLayout(new java.awt.BorderLayout());

    jLabel35.setText("<html>Returns <tt>true</tt> if and only if both elements are <tt>ArrayPP</tt>s and contain the same elements (their individual <tt>equals</tt> methods return true)");
    jPanel20.add(jLabel35, java.awt.BorderLayout.CENTER);

    jTabbedPane8.addTab("equals", jPanel20);

    jPanel21.setLayout(new java.awt.GridBagLayout());

    jLabel36.setText("fillEmptyWith(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel21.add(jLabel36, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel21.add(jTextField3, gridBagConstraints);

    jLabel37.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel21.add(jLabel37, gridBagConstraints);

    jButton9.setText("Fill all null values!");
    jButton9.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton9ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel21.add(jButton9, gridBagConstraints);

    jTabbedPane8.addTab("fillEmptyWith", jPanel21);

    jPanel22.setLayout(new java.awt.GridBagLayout());

    jLabel39.setText("fillWith(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel22.add(jLabel39, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel22.add(jTextField4, gridBagConstraints);

    jLabel40.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel22.add(jLabel40, gridBagConstraints);

    jButton10.setText("Fill all values!");
    jButton10.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton10ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel22.add(jButton10, gridBagConstraints);

    jTabbedPane8.addTab("fillWith", jPanel22);

    jPanel23.setLayout(new java.awt.GridBagLayout());

    jLabel41.setText("get(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel23.add(jLabel41, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel23.add(jSpinner1, gridBagConstraints);

    jLabel42.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel23.add(jLabel42, gridBagConstraints);

    jButton11.setText("Get it!");
    jButton11.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton11ActionPerformed(evt);
      }
    });
    jPanel23.add(jButton11, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("get", jPanel23);

    jPanel24.setLayout(new java.awt.GridBagLayout());

    jLabel43.setText("getIndecesOf(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel24.add(jLabel43, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel24.add(arrayPPGetIndicesOfTextField, gridBagConstraints);

    jLabel44.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel24.add(jLabel44, gridBagConstraints);

    jButton12.setText("Get 'em!");
    jButton12.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton12ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel24.add(jButton12, gridBagConstraints);

    jTabbedPane8.addTab("getIndicesOf", jPanel24);

    jPanel25.setLayout(new java.awt.GridBagLayout());

    jLabel45.setText("getIndexOf(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel25.add(jLabel45, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel25.add(arrayPPGetIndexOfTextField, gridBagConstraints);

    jLabel46.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel25.add(jLabel46, gridBagConstraints);

    jButton13.setText("Get it!");
    jButton13.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton13ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel25.add(jButton13, gridBagConstraints);

    jTabbedPane8.addTab("getIndexOf", jPanel25);

    jPanel26.setLayout(new java.awt.GridBagLayout());

    jLabel47.setText("getLastIndexOf(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel26.add(jLabel47, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel26.add(arrayPPGetLastIndexOfTextField, gridBagConstraints);

    jLabel48.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel26.add(jLabel48, gridBagConstraints);

    jButton14.setText("Get it!");
    jButton14.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton14ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel26.add(jButton14, gridBagConstraints);

    jTabbedPane8.addTab("getLastIndexOf", jPanel26);

    jPanel27.setLayout(new java.awt.GridBagLayout());

    jLabel49.setText("hasNot(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel27.add(jLabel49, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel27.add(arrayPPHasNotTextField, gridBagConstraints);

    jLabel50.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel27.add(jLabel50, gridBagConstraints);

    jButton15.setText("Has it only?");
    jButton15.setToolTipText("Find out whether the array++ contains anything but the specified items");
    jButton15.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton15ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel27.add(jButton15, gridBagConstraints);

    jLabel51.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    jPanel27.add(jLabel51, gridBagConstraints);

    jTabbedPane8.addTab("hasOnly", jPanel27);

    jPanel29.setLayout(new java.awt.GridBagLayout());

    jLabel52.setText("insert(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel29.add(jLabel52, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel29.add(arrayPPInsertValTextField, gridBagConstraints);

    jLabel53.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel29.add(jLabel53, gridBagConstraints);

    arrayPPInsertIndexSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel29.add(arrayPPInsertIndexSpinner, gridBagConstraints);

    jLabel54.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel29.add(jLabel54, gridBagConstraints);

    arrayPPInsertButton.setText("Insert it!");
    arrayPPInsertButton.setToolTipText("Yes, that's what she said.");
    arrayPPInsertButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPInsertButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel29.add(arrayPPInsertButton, gridBagConstraints);

    jLabel55.setText("<html>(typing <tt>null</tt> will insert a null value into the array.)<br/>(There is another version of this method, <tt>insert(T[] vals, int... indices);</tt>, but no other array exists to insert)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel29.add(jLabel55, gridBagConstraints);

    jTabbedPane8.addTab("insert", jPanel29);

    jPanel32.setLayout(new java.awt.GridBagLayout());

    jButton17.setText("Is it empty?");
    jButton17.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton17ActionPerformed(evt);
      }
    });
    jPanel32.add(jButton17, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("isEmpty", jPanel32);

    jPanel30.setLayout(new java.awt.GridBagLayout());

    jLabel56.setText("isolate(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel30.add(jLabel56, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel30.add(arrayPPIsolateTextField, gridBagConstraints);

    jLabel57.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel30.add(jLabel57, gridBagConstraints);

    arrayPPIsolateButton.setText("Isolate!");
    arrayPPIsolateButton.setToolTipText("Find out whether the array++ contains anything but the specified items");
    arrayPPIsolateButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPIsolateButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel30.add(arrayPPIsolateButton, gridBagConstraints);

    jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel58.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel30.add(jLabel58, gridBagConstraints);

    jTabbedPane8.addTab("isolate", jPanel30);

    jPanel33.setLayout(new java.awt.GridBagLayout());

    jButton18.setText("length()");
    jButton18.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton18ActionPerformed(evt);
      }
    });
    jPanel33.add(jButton18, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("length", jPanel33);

    jPanel34.setLayout(new java.awt.GridBagLayout());

    jLabel26.setText("remove(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel34.add(jLabel26, gridBagConstraints);

    arrayPPRemoveTextField.setFont(new java.awt.Font("Monospaced", 0, 11));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel34.add(arrayPPRemoveTextField, gridBagConstraints);

    jLabel62.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel34.add(jLabel62, gridBagConstraints);

    jButton19.setText("Remove it!");
    jButton19.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton19ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel34.add(jButton19, gridBagConstraints);

    jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel63.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel34.add(jLabel63, gridBagConstraints);

    jLabel64.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 1;
    jPanel34.add(jLabel64, gridBagConstraints);

    arrayPPRemoveAllCheckBox.setText("removeAll");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    jPanel34.add(arrayPPRemoveAllCheckBox, gridBagConstraints);

    jLabel65.setText("remove(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel34.add(jLabel65, gridBagConstraints);

    arrayPPRemoveSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel34.add(arrayPPRemoveSpinner, gridBagConstraints);

    jLabel67.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel34.add(jLabel67, gridBagConstraints);

    jButton20.setText("Remove it!");
    jButton20.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton20ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel34.add(jButton20, gridBagConstraints);

    jTabbedPane8.addTab("remove", jPanel34);

    jPanel35.setLayout(new java.awt.GridBagLayout());

    jLabel66.setText("replace(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel35.add(jLabel66, gridBagConstraints);

    arrayPPReplaceTextField2.setFont(new java.awt.Font("Monospaced", 0, 11));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel35.add(arrayPPReplaceTextField2, gridBagConstraints);

    jLabel68.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel35.add(jLabel68, gridBagConstraints);

    jButton21.setText("Replace it!");
    jButton21.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton21ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel35.add(jButton21, gridBagConstraints);

    jLabel69.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel69.setText("<html>(Separate with commas. Do not use spaces when separating.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel35.add(jLabel69, gridBagConstraints);

    jLabel70.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel35.add(jLabel70, gridBagConstraints);

    arrayPPReplaceAllCheckBox.setText("replaceAll");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel35.add(arrayPPReplaceAllCheckBox, gridBagConstraints);

    arrayPPReplaceTextField1.setFont(new java.awt.Font("Monospaced", 0, 11));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel35.add(arrayPPReplaceTextField1, gridBagConstraints);

    jLabel73.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel35.add(jLabel73, gridBagConstraints);

    jTabbedPane8.addTab("replace", jPanel35);

    jPanel36.setLayout(new java.awt.GridBagLayout());

    jLabel71.setText("set(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel36.add(jLabel71, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel36.add(arrayPPSetValTextField, gridBagConstraints);

    jLabel72.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel36.add(jLabel72, gridBagConstraints);

    arrayPPSetIndexSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel36.add(arrayPPSetIndexSpinner, gridBagConstraints);

    jLabel74.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel36.add(jLabel74, gridBagConstraints);

    arrayPPSetButton.setText("Set it!");
    arrayPPSetButton.setToolTipText("Yes, that's what she said.");
    arrayPPSetButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPSetButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel36.add(arrayPPSetButton, gridBagConstraints);

    jTabbedPane8.addTab("set", jPanel36);

    jPanel37.setLayout(new java.awt.GridBagLayout());

    jLabel75.setText("subSet(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel37.add(jLabel75, gridBagConstraints);

    jLabel76.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel37.add(jLabel76, gridBagConstraints);

    arrayPPSubSetEndIndexSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel37.add(arrayPPSubSetEndIndexSpinner, gridBagConstraints);

    jLabel77.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel37.add(jLabel77, gridBagConstraints);

    arrayPPSubSetButton.setText("Get Sub-Set!");
    arrayPPSubSetButton.setToolTipText("Yes, that's what she said.");
    arrayPPSubSetButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPSubSetButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel37.add(arrayPPSubSetButton, gridBagConstraints);

    arrayPPSubSetBeginIndexSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel37.add(arrayPPSubSetBeginIndexSpinner, gridBagConstraints);

    jTabbedPane8.addTab("subSet", jPanel37);

    jPanel38.setLayout(new java.awt.GridBagLayout());

    jLabel78.setText("swap(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel38.add(jLabel78, gridBagConstraints);

    jLabel79.setText(", ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel38.add(jLabel79, gridBagConstraints);

    arrayPPSwapIndex2Spinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel38.add(arrayPPSwapIndex2Spinner, gridBagConstraints);

    jLabel80.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel38.add(jLabel80, gridBagConstraints);

    arrayPPSwapButton.setText("Swap 'em!");
    arrayPPSwapButton.setToolTipText("Yes, that's what she said.");
    arrayPPSwapButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPSwapButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel38.add(arrayPPSwapButton, gridBagConstraints);

    arrayPPSwapIndex1Spinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel38.add(arrayPPSwapIndex1Spinner, gridBagConstraints);

    jTabbedPane8.addTab("swap", jPanel38);

    jPanel39.setLayout(new java.awt.GridBagLayout());

    jButton22.setText("toString()");
    jButton22.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton22ActionPerformed(evt);
      }
    });
    jPanel39.add(jButton22, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("toString", jPanel39);

    jPanel40.setLayout(new java.awt.GridBagLayout());

    jButton23.setText("trim()");
    jButton23.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton23ActionPerformed(evt);
      }
    });
    jPanel40.add(jButton23, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("trim", jPanel40);

    jPanel41.setLayout(new java.awt.GridBagLayout());

    jButton24.setText("trimInside()");
    jButton24.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton24ActionPerformed(evt);
      }
    });
    jPanel41.add(jButton24, new java.awt.GridBagConstraints());

    jTabbedPane8.addTab("trimInside", jPanel41);

    jPanel16.add(jTabbedPane8, java.awt.BorderLayout.CENTER);

    jLabel23.setText("<html><b>Note that this particular <tt>ArrayPP</tt> manages <tt>String</tt>s for example's sake, but an <tt>ArrayPP</tt> can manage ANY object.");
    jPanel16.add(jLabel23, java.awt.BorderLayout.PAGE_START);
    jLabel23.getAccessibleContext().setAccessibleDescription(Colors.FONT_STYLE_OVERRIDE + java.awt.Font.BOLD + Colors.COMMAND_SEP);

    bht_tools_utilitiesTabbedPane.addTab("ArrayPP", jPanel16);

    jPanel56.setLayout(new java.awt.BorderLayout(4, 4));

    jPanel57.setLayout(new java.awt.BorderLayout());

    arrayPPRereadButton1.setText("Re-read Array");
    arrayPPRereadButton1.setEnabled(false);
    arrayPPRereadButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        arrayPPRereadButton1ActionPerformed(evt);
      }
    });
    jPanel57.add(arrayPPRereadButton1, java.awt.BorderLayout.NORTH);

    jTable1.setMinimumSize(new java.awt.Dimension(64, 64));
    jTable1.setPreferredSize(new java.awt.Dimension(128, 64));
    jScrollPane6.setViewportView(jTable1);

    jPanel57.add(jScrollPane6, java.awt.BorderLayout.CENTER);

    jPanel56.add(jPanel57, java.awt.BorderLayout.EAST);

    jLabel160.setText("<html><b>Note that this particular <tt>ArrayTable</tt> manages <tt>String</tt>s for example's sake, but an <tt>ArrayTable</tt> can manage ANY object.");
    jPanel56.add(jLabel160, java.awt.BorderLayout.PAGE_START);

    jTabbedPane10.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
    jTabbedPane10.setTabPlacement(javax.swing.JTabbedPane.LEFT);

    jButton39.setText("print");
    jButton39.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton39ActionPerformed(evt);
      }
    });
    jPanel58.add(jButton39);

    jTabbedPane10.addTab("toString", jPanel58);

    jPanel56.add(jTabbedPane10, java.awt.BorderLayout.CENTER);

    bht_tools_utilitiesTabbedPane.addTab("ArrayTable", jPanel56);

    jPanel12.setLayout(new java.awt.BorderLayout());

    jTabbedPane7.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
    jTabbedPane7.setTabPlacement(javax.swing.JTabbedPane.LEFT);

    jPanel43.setLayout(new java.awt.GridBagLayout());

    jLabel91.setText("copy(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel43.add(jLabel91, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel43.add(copierCopyTextField, gridBagConstraints);

    jLabel92.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel43.add(jLabel92, gridBagConstraints);

    jButton26.setText("Copy it!");
    jButton26.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton26ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel43.add(jButton26, gridBagConstraints);

    jTabbedPane7.addTab("copy", jPanel43);

    jPanel44.setLayout(new java.awt.GridBagLayout());

    jLabel14.setText("searchToCopyIn(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel44.add(jLabel14, gridBagConstraints);

    copierSearchToCopyInTextArea.setColumns(20);
    copierSearchToCopyInTextArea.setRows(5);
    jScrollPane2.setViewportView(copierSearchToCopyInTextArea);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel44.add(jScrollPane2, gridBagConstraints);

    jLabel89.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel44.add(jLabel89, gridBagConstraints);

    jButton25.setText("Search and copy!");
    jButton25.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton25ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel44.add(jButton25, gridBagConstraints);

    jLabel90.setText("<html><b>Note that this pane uses a <tt>JTextArea</tt> for example, but this method will search any and all components for selected text.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel44.add(jLabel90, gridBagConstraints);

    jTabbedPane7.addTab("searchToCopyIn", jPanel44);

    jPanel12.add(jTabbedPane7, java.awt.BorderLayout.CENTER);

    bht_tools_utilitiesTabbedPane.addTab("Copier", jPanel12);

    jPanel13.setLayout(new java.awt.GridBagLayout());

    jTabbedPane9.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
    jTabbedPane9.setTabPlacement(javax.swing.JTabbedPane.LEFT);

    jPanel45.setLayout(new java.awt.GridBagLayout());

    jLabel96.setText("add(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel45.add(jLabel96, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel45.add(HistoryArrayAddTextField, gridBagConstraints);

    jLabel97.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel45.add(jLabel97, gridBagConstraints);

    jButton27.setText("Add it!");
    jButton27.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton27ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel45.add(jButton27, gridBagConstraints);

    jTabbedPane9.addTab("add", jPanel45);

    jPanel46.setLayout(new java.awt.GridBagLayout());

    jLabel98.setText("append(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel46.add(jLabel98, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel46.add(jTextField6, gridBagConstraints);

    jLabel99.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel46.add(jLabel99, gridBagConstraints);

    jButton28.setText("Append it!");
    jButton28.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton28ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel46.add(jButton28, gridBagConstraints);

    jTabbedPane9.addTab("append", jPanel46);

    jPanel47.setLayout(new java.awt.GridBagLayout());

    jButton29.setText("canGoBack()");
    jButton29.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton29ActionPerformed(evt);
      }
    });
    jPanel47.add(jButton29, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("canGoBack", jPanel47);

    jPanel48.setLayout(new java.awt.GridBagLayout());

    jButton30.setText("canGoNext()");
    jButton30.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton30ActionPerformed(evt);
      }
    });
    jPanel48.add(jButton30, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("canGoNext", jPanel48);

    jPanel49.setLayout(new java.awt.GridBagLayout());

    jLabel100.setText("canGoTo(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel49.add(jLabel100, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel49.add(historyArrayCanGoToSpinner, gridBagConstraints);

    jLabel101.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel49.add(jLabel101, gridBagConstraints);

    jButton31.setText("Can you go there?");
    jButton31.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton31ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel49.add(jButton31, gridBagConstraints);

    jTabbedPane9.addTab("canGoTo", jPanel49);

    jPanel50.setLayout(new java.awt.GridBagLayout());

    jLabel102.setText("get(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel50.add(jLabel102, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel50.add(jSpinner2, gridBagConstraints);

    jLabel103.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel50.add(jLabel103, gridBagConstraints);

    jButton32.setText("Get it!");
    jButton32.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton32ActionPerformed(evt);
      }
    });
    jPanel50.add(jButton32, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("get", jPanel50);

    jPanel51.setLayout(new java.awt.GridBagLayout());

    jButton33.setText("getCurrentIndex()");
    jButton33.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton33ActionPerformed(evt);
      }
    });
    jPanel51.add(jButton33, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("getCurrentIndex", jPanel51);

    jPanel52.setLayout(new java.awt.GridBagLayout());

    jLabel104.setText("getFromBackHist(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel52.add(jLabel104, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel52.add(jSpinner3, gridBagConstraints);

    jLabel105.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel52.add(jLabel105, gridBagConstraints);

    jButton34.setText("Get it!");
    jButton34.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton34ActionPerformed(evt);
      }
    });
    jPanel52.add(jButton34, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("getFromBackHist", jPanel52);

    jPanel53.setLayout(new java.awt.GridBagLayout());

    jLabel106.setText("getFromNextHist(");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
    jPanel53.add(jLabel106, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
    jPanel53.add(jSpinner4, gridBagConstraints);

    jLabel107.setText(");");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    jPanel53.add(jLabel107, gridBagConstraints);

    jButton35.setText("Get it!");
    jButton35.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton35ActionPerformed(evt);
      }
    });
    jPanel53.add(jButton35, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("getFromNextHist", jPanel53);

    jPanel54.setLayout(new java.awt.GridBagLayout());

    jButton36.setText("goBack()");
    jButton36.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton36ActionPerformed(evt);
      }
    });
    jPanel54.add(jButton36, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("goBack", jPanel54);

    jPanel55.setLayout(new java.awt.GridBagLayout());

    jButton37.setText("goNext()");
    jButton37.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton37ActionPerformed(evt);
      }
    });
    jPanel55.add(jButton37, new java.awt.GridBagConstraints());

    jTabbedPane9.addTab("goNext", jPanel55);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jTabbedPane9, gridBagConstraints);

    jScrollPane3.setViewportView(historyArrayGetBackHistList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jScrollPane3, gridBagConstraints);

    jScrollPane4.setViewportView(historyArrayGetNextHistList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jScrollPane4, gridBagConstraints);

    jLabel15.setText("<html><b>Note that this particular <tt>HistoryArray</tt> manages <tt>String</tt>s for example's sake, but a <tt>HistoryArray</tt> can manage ANY object.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel13.add(jLabel15, gridBagConstraints);

    jLabel93.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel93.setText("getBackHist()");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jLabel93, gridBagConstraints);

    jLabel94.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel94.setText("getNextHist()");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jLabel94, gridBagConstraints);

    jScrollPane5.setViewportView(historyArrayGetFullHistList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jScrollPane5, gridBagConstraints);

    jLabel95.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel95.setText("getFullHist()");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(jLabel95, gridBagConstraints);

    historyArrayCurrentItemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    jPanel13.add(historyArrayCurrentItemLabel, gridBagConstraints);

    jButton38.setText("Re-read HistoryArray");
    jButton38.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton38ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    jPanel13.add(jButton38, gridBagConstraints);

    bht_tools_utilitiesTabbedPane.addTab("HistoryArray", jPanel13);

    jLabel16.setText("To Do");
    jPanel14.add(jLabel16);

    bht_tools_utilitiesTabbedPane.addTab("Numbers", jPanel14);

    jLabel18.setText("To Do");
    jPanel15.add(jLabel18);

    bht_tools_utilitiesTabbedPane.addTab("ProgLog", jPanel15);
    bht_tools_utilitiesTabbedPane.addTab("StringPP", jPanel10);

    jTabbedPane1.addTab("bht.tools.utilities", bht_tools_utilitiesTabbedPane);

    jPanel1.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jPanel1, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  @SuppressWarnings("UseOfSystemOutOrSystemErr")
    private void alertOfMessageButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertOfMessageButtonActionPerformed
    {//GEN-HEADEREND:event_alertOfMessageButtonActionPerformed
      try
      {
        String s = alertOfMessageTextField.getText();
        if (s.equals("null"))
          s = null;
        if (alertOfMessageTypeComboBox.getSelectedItem().toString().equalsIgnoreCase("PLAIN_MES"))
        {
          System.out.println(alertOf(s, YesNoBox.PLAIN_MES));
        }
        else if (alertOfMessageTypeComboBox.getSelectedItem().toString().equalsIgnoreCase("INFO_MES"))
        {
          System.out.println(alertOf(s, YesNoBox.INFO_MES));
        }
        else if (alertOfMessageTypeComboBox.getSelectedItem().toString().equalsIgnoreCase("QUESTION_MES"))
        {
          System.out.println(alertOf(s, YesNoBox.QUESTION_MES));
        }
        else if (alertOfMessageTypeComboBox.getSelectedItem().toString().equalsIgnoreCase("WARNING_MES"))
        {
          System.out.println(alertOf(s, YesNoBox.WARNING_MES));
        }
        else if (alertOfMessageTypeComboBox.getSelectedItem().toString().equalsIgnoreCase("ERROR_MES"))
        {
          System.out.println(alertOf(s, YesNoBox.ERROR_MES));
        }
      }
      catch (Throwable t)
      {
        alertOf(t);
      }
    }//GEN-LAST:event_alertOfMessageButtonActionPerformed

  private void alertOfThrowableButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertOfThrowableButtonActionPerformed
  {//GEN-HEADEREND:event_alertOfThrowableButtonActionPerformed
    try
    {
      String s = alertOfThrowableTextField.getText();
      if (s.equals("null"))
        s = null;
      switch (alertOfThrowableComboBox.getSelectedIndex())
      {
        case 0:
          throw new Throwable(s);
        case 1:
          throw new Error(s);
        case 2:
          throw new Exception(s);
        case 3:
          throw new ArrayIndexOutOfBoundsException(s);
        case 4:
          throw new OutOfMemoryError(s);
        default:
          throw new UnknownError("Error chosen not recognized");
      }
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_alertOfThrowableButtonActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
  {//GEN-HEADEREND:event_jButton3ActionPerformed
    clearAlert();
  }//GEN-LAST:event_jButton3ActionPerformed

  private void bhPasswordFieldTipTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_bhPasswordFieldTipTextFieldKeyReleased
  {//GEN-HEADEREND:event_bhPasswordFieldTipTextFieldKeyReleased
    try
    {
      bhPasswordField.setTipText(bhPasswordFieldTipTextField.getText().equals("null") ? null : bhPasswordFieldTipTextField.getText());
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_bhPasswordFieldTipTextFieldKeyReleased

  private void bhTextFieldTipTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_bhTextFieldTipTextFieldKeyReleased
  {//GEN-HEADEREND:event_bhTextFieldTipTextFieldKeyReleased
    try
    {
      bhTextField.setTipText(bhTextFieldTipTextField.getText().equals("null") ? null : bhTextFieldTipTextField.getText());
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_bhTextFieldTipTextFieldKeyReleased

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    getCompAction().ghostIn(getCustColorsEditDialog());
  }//GEN-LAST:event_jButton1ActionPerformed

  private void colorsPartComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_colorsPartComboBoxActionPerformed
  {//GEN-HEADEREND:event_colorsPartComboBoxActionPerformed
    try
    {
      fixColorsStylePartExample();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_colorsPartComboBoxActionPerformed

  private void jTextField1KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField1KeyReleased
  {//GEN-HEADEREND:event_jTextField1KeyReleased
    try
    {
      setColorHexPanel.setBackground(Colors.getColor(jTextField1.getText()));
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jTextField1KeyReleased

  private void colorsStyleComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_colorsStyleComboBoxActionPerformed
  {//GEN-HEADEREND:event_colorsStyleComboBoxActionPerformed
    try
    {
      fixColorsStylePartExample();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_colorsStyleComboBoxActionPerformed

  private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
  {//GEN-HEADEREND:event_jButton5ActionPerformed
    try
    {
      alertOf(Boolean.toString(YesNoBox.bool(yesNoBoxBoolPromptTextField1.getText())), YesNoBox.DEF_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton5ActionPerformed

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
  {//GEN-HEADEREND:event_jButton2ActionPerformed
    try
    {
      byte type;
      switch (yesNoBoxBoolTypeComboBox.getSelectedIndex())
      {
        case 0:
          type = YesNoBox.PLAIN_MES;
          break;
        case 1:
          type = YesNoBox.INFO_MES;
          break;
        default:
        case 2:
          type = YesNoBox.QUESTION_MES;
          break;
        case 3:
          type = YesNoBox.WARNING_MES;
          break;
        case 4:
          type = YesNoBox.ERROR_MES;
          break;
      }
      alertOf(Boolean.toString(YesNoBox.bool(yesNoBoxBoolPromptTextField2.getText(), yesNoBoxBoolTitleTextField.getText(), type)),
              type);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton2ActionPerformed

  private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
  {//GEN-HEADEREND:event_jButton4ActionPerformed
    try
    {
      int res = YesNoBox.integer(yesNoBoxIntegerPromptTextField1.getText());
      alertOf(res + " (" + (res == YesNoBox.YES_RES ? "Yes" : (res == YesNoBox.NO_RES ? "No" : "Closed")) + ")",
              YesNoBox.DEF_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton4ActionPerformed

  private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
  {//GEN-HEADEREND:event_jButton6ActionPerformed
    try
    {
      byte type;
      int res;
      switch (yesNoBoxIntegerTypeComboBox.getSelectedIndex())
      {
        case 0:
          type = YesNoBox.PLAIN_MES;
          break;
        case 1:
          type = YesNoBox.INFO_MES;
          break;
        default:
        case 2:
          type = YesNoBox.QUESTION_MES;
          break;
        case 3:
          type = YesNoBox.WARNING_MES;
          break;
        case 4:
          type = YesNoBox.ERROR_MES;
          break;
      }
      res = YesNoBox.integer(yesNoBoxIntegerPromptTextField2.getText(), yesNoBoxIntegerTitleTextField.getText(), type);
      alertOf(res + " (" + (res == YesNoBox.YES_RES ? "Yes" : (res == YesNoBox.NO_RES ? "No" : "Closed")) + ")", type);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton6ActionPerformed

  private void jButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7ActionPerformed
  {//GEN-HEADEREND:event_jButton7ActionPerformed
    try
    {
      testAPP.add(arrayPPAddTextField.getText().equals("null") ? null : arrayPPAddTextField.getText());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton7ActionPerformed

  private void jButton9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton9ActionPerformed
  {//GEN-HEADEREND:event_jButton9ActionPerformed
    try
    {
      testAPP.fillEmptyWith(jTextField3.getText());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton9ActionPerformed

  private void jButton10ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton10ActionPerformed
  {//GEN-HEADEREND:event_jButton10ActionPerformed
    try
    {
      testAPP.fillWith(jTextField4.getText());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton10ActionPerformed

  private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
  {//GEN-HEADEREND:event_jButton8ActionPerformed
    try
    {
      alertOf("Array++ does " + (testAPP.containsAll(parseCSVToArray(jTextField2.getText())) ? "" : "not ") + "contain that.",
              YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton8ActionPerformed

  private void jButton11ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton11ActionPerformed
  {//GEN-HEADEREND:event_jButton11ActionPerformed
    try
    {
      alertOf(testAPP.get(Integer.parseInt(jSpinner1.getValue().toString())), YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton11ActionPerformed

  private void jButton12ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton12ActionPerformed
  {//GEN-HEADEREND:event_jButton12ActionPerformed
    try
    {
      arrayPPList.setSelectedIndices(testAPP.getIndicesOf(arrayPPGetIndicesOfTextField.getText()));
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton12ActionPerformed

  private void jButton13ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton13ActionPerformed
  {//GEN-HEADEREND:event_jButton13ActionPerformed
    try
    {
      alertOf(testAPP.getIndexOf(arrayPPGetIndexOfTextField.getText()) + "", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton13ActionPerformed

  private void jButton14ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton14ActionPerformed
  {//GEN-HEADEREND:event_jButton14ActionPerformed
    try
    {
      alertOf(testAPP.getLastIndexOf(arrayPPGetLastIndexOfTextField.getText()) + "", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton14ActionPerformed

  private void jButton15ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton15ActionPerformed
  {//GEN-HEADEREND:event_jButton15ActionPerformed
    try
    {
      alertOf(testAPP.hasOnly(parseCSVToArray(arrayPPHasNotTextField.getText())) ? "Yes" : "No", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton15ActionPerformed

  private void jButton16ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton16ActionPerformed
  {//GEN-HEADEREND:event_jButton16ActionPerformed
    try
    {
      testAPP.clear();
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton16ActionPerformed

  private void arrayPPInsertButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPInsertButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPInsertButtonActionPerformed
    try
    {
      testAPP.insert(arrayPPInsertValTextField.getText().equals("null") ? null : arrayPPInsertValTextField.getText(), Integer.parseInt(arrayPPInsertIndexSpinner.getValue().toString()));
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPInsertButtonActionPerformed

  private void arrayPPIsolateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPIsolateButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPIsolateButtonActionPerformed
    try
    {
      setTestAPPDisplayList(testAPP.isolate(new ArrayPP<String>(parseCSVToArray(arrayPPIsolateTextField.getText())).toArray()));
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPIsolateButtonActionPerformed

  private void arrayPPCompareToButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPCompareToButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPCompareToButtonActionPerformed
    try
    {
      alertOf(testAPP.compareTo(new ArrayPP<String>(parseCSVToArray(arrayPPCompareToTextField.getText()))) + "",
              YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPCompareToButtonActionPerformed

  private void arrayPPRereadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPRereadButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPRereadButtonActionPerformed
    refillTestAPPDisplayList();
  }//GEN-LAST:event_arrayPPRereadButtonActionPerformed

  private void jButton17ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton17ActionPerformed
  {//GEN-HEADEREND:event_jButton17ActionPerformed
    alertOf("Array++ is " + (testAPP.isEmpty() ? "" : "not ") + "empty", YesNoBox.INFO_MES);
  }//GEN-LAST:event_jButton17ActionPerformed

  private void jButton18ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton18ActionPerformed
  {//GEN-HEADEREND:event_jButton18ActionPerformed
    alertOf("Array++ is " + testAPP.length() + " items long", YesNoBox.INFO_MES);
  }//GEN-LAST:event_jButton18ActionPerformed

  private void jButton19ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton19ActionPerformed
  {//GEN-HEADEREND:event_jButton19ActionPerformed
    try
    {
      testAPP.remove(parseCSVToArray(arrayPPRemoveTextField.getText()), arrayPPRemoveAllCheckBox.isSelected());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton19ActionPerformed

  private void jButton20ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton20ActionPerformed
  {//GEN-HEADEREND:event_jButton20ActionPerformed
    try
    {
      testAPP.remove(arrayPPRemoveSpinner.parseValueToInt());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton20ActionPerformed

  private void jButton21ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton21ActionPerformed
  {//GEN-HEADEREND:event_jButton21ActionPerformed
    try
    {
      testAPP.replace(parseCSVToArray(arrayPPReplaceTextField1.getText()), parseCSVToArray(arrayPPReplaceTextField2.getText()), arrayPPReplaceAllCheckBox.
              isSelected());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton21ActionPerformed

  private void arrayPPSetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPSetButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPSetButtonActionPerformed
    try
    {
      testAPP.set(arrayPPSetIndexSpinner.parseValueToInt(), arrayPPSetValTextField.getText());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPSetButtonActionPerformed

  private void arrayPPSubSetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPSubSetButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPSubSetButtonActionPerformed
    try
    {
      setTestAPPDisplayList(testAPP.subSet(arrayPPSubSetBeginIndexSpinner.parseValueToInt(), arrayPPSubSetEndIndexSpinner.
              parseValueToInt()));
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPSubSetButtonActionPerformed

  private void arrayPPSwapButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPSwapButtonActionPerformed
  {//GEN-HEADEREND:event_arrayPPSwapButtonActionPerformed
    try
    {
      testAPP.swap(arrayPPSwapIndex1Spinner.parseValueToInt(), arrayPPSwapIndex2Spinner.parseValueToInt());
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_arrayPPSwapButtonActionPerformed

  private void jButton22ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton22ActionPerformed
  {//GEN-HEADEREND:event_jButton22ActionPerformed
    try
    {
      alertOf(testAPP.toString(), YesNoBox.PLAIN_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton22ActionPerformed

  private void jButton23ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton23ActionPerformed
  {//GEN-HEADEREND:event_jButton23ActionPerformed
    try
    {
      testAPP.trim();
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton23ActionPerformed

  private void jButton24ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton24ActionPerformed
  {//GEN-HEADEREND:event_jButton24ActionPerformed
    try
    {
      testAPP.trimInside();
      refillTestAPPDisplayList();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton24ActionPerformed

  private void bhSpinnerToolTipTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_bhSpinnerToolTipTextFieldKeyReleased
  {//GEN-HEADEREND:event_bhSpinnerToolTipTextFieldKeyReleased
    bhSpinner.setToolTipText(bhSpinnerToolTipTextField.getText());
  }//GEN-LAST:event_bhSpinnerToolTipTextFieldKeyReleased

  private void jButton26ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton26ActionPerformed
  {//GEN-HEADEREND:event_jButton26ActionPerformed
    Copier.copy(copierCopyTextField.getText());
  }//GEN-LAST:event_jButton26ActionPerformed

  private void jButton25ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton25ActionPerformed
  {//GEN-HEADEREND:event_jButton25ActionPerformed
    Copier.searchToCopyIn(copierSearchToCopyInTextArea);
  }//GEN-LAST:event_jButton25ActionPerformed

  private void jButton27ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton27ActionPerformed
  {//GEN-HEADEREND:event_jButton27ActionPerformed
    try
    {
      testHA.add(HistoryArrayAddTextField.getText());
      fixHistArrayLists();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton27ActionPerformed

  private void jButton28ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton28ActionPerformed
  {//GEN-HEADEREND:event_jButton28ActionPerformed
    try
    {
      testHA.append(HistoryArrayAddTextField.getText());
      fixHistArrayLists();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton28ActionPerformed

  private void bht_tools_utilitiesTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_bht_tools_utilitiesTabbedPaneStateChanged
  {//GEN-HEADEREND:event_bht_tools_utilitiesTabbedPaneStateChanged
    if (bht_tools_utilitiesTabbedPane.getSelectedIndex() == 2)
      fixHistArrayLists();
  }//GEN-LAST:event_bht_tools_utilitiesTabbedPaneStateChanged

  private void jButton29ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton29ActionPerformed
  {//GEN-HEADEREND:event_jButton29ActionPerformed
    try
    {
      alertOf(testHA.canGoBack() ? "Yes" : "No", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton29ActionPerformed

  private void jButton30ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton30ActionPerformed
  {//GEN-HEADEREND:event_jButton30ActionPerformed
    try
    {
      alertOf(testHA.canGoNext() ? "Yes" : "No", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton30ActionPerformed

  private void jButton31ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton31ActionPerformed
  {//GEN-HEADEREND:event_jButton31ActionPerformed
    try
    {
      alertOf(testHA.canGoTo(historyArrayCanGoToSpinner.parseValueToInt()) ? "Yes" : "No", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton31ActionPerformed

  private void jButton32ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton32ActionPerformed
  {//GEN-HEADEREND:event_jButton32ActionPerformed
    try
    {
      alertOf(testHA.get(jSpinner2.parseValueToInt()), YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton32ActionPerformed

  private void jButton33ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton33ActionPerformed
  {//GEN-HEADEREND:event_jButton33ActionPerformed
    try
    {
      alertOf(testHA.getCurrentIndex() + "", YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton33ActionPerformed

  private void jButton34ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton34ActionPerformed
  {//GEN-HEADEREND:event_jButton34ActionPerformed
    try
    {
      alertOf(testHA.getFromBackHist(jSpinner3.parseValueToInt()), YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton34ActionPerformed

  private void jButton35ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton35ActionPerformed
  {//GEN-HEADEREND:event_jButton35ActionPerformed
    try
    {
      alertOf(testHA.getFromNextHist(jSpinner4.parseValueToInt()), YesNoBox.INFO_MES);
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton35ActionPerformed

  private void jButton36ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton36ActionPerformed
  {//GEN-HEADEREND:event_jButton36ActionPerformed
    try
    {
      testHA.goBack();
      fixHistArrayLists();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton36ActionPerformed

  private void jButton37ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton37ActionPerformed
  {//GEN-HEADEREND:event_jButton37ActionPerformed
    try
    {
      testHA.goNext();
      fixHistArrayLists();
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton37ActionPerformed

  private void jButton38ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton38ActionPerformed
  {//GEN-HEADEREND:event_jButton38ActionPerformed
    fixHistArrayLists();
  }//GEN-LAST:event_jButton38ActionPerformed

  private void arrayPPRereadButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrayPPRereadButton1ActionPerformed
  {//GEN-HEADEREND:event_arrayPPRereadButton1ActionPerformed
    
  }//GEN-LAST:event_arrayPPRereadButton1ActionPerformed

  private void jButton39ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton39ActionPerformed
  {//GEN-HEADEREND:event_jButton39ActionPerformed
    System.out.println(testAT.toString());
  }//GEN-LAST:event_jButton39ActionPerformed

  private void jButton40ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton40ActionPerformed
  {//GEN-HEADEREND:event_jButton40ActionPerformed
    try
    {
      BoardPanelPanel.setBoardSize(jSpinner8.parseValueToInt(), jSpinner9.parseValueToInt());
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton40ActionPerformed

  private void jButton41ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton41ActionPerformed
  {//GEN-HEADEREND:event_jButton41ActionPerformed
    try
    {
      BoardPanelPanel.openSquare(BoardPanelOpenSquareXSpinner.parseValueToInt(),
                                 BoardPanelOpenSquareYSpinner.parseValueToInt(),
                                 (byte)BoardPanelOpenSquareDirectionComboBox.getSelectedIndex());
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }//GEN-LAST:event_jButton41ActionPerformed

  private void fixHistArrayLists()
  {
    historyArrayGetBackHistList.setModel(new javax.swing.AbstractListModel()
    {
      public int getSize()
      {
        return testHA.getBackHist().length();
      }

      public Object getElementAt(int index)
      {
        return testHA.getFromBackHist(index);
      }
    });
    historyArrayGetNextHistList.setModel(new javax.swing.AbstractListModel()
    {
      public int getSize()
      {
        return testHA.getNextHist().length();
      }

      public Object getElementAt(int index)
      {
        return testHA.getFromNextHist(index);
      }
    });
    historyArrayGetFullHistList.setModel(new javax.swing.AbstractListModel()
    {
      public int getSize()
      {
        return testHA.getFullHist().length();
      }

      public Object getElementAt(int index)
      {
        return testHA.get(index);
      }
    });
    historyArrayCurrentItemLabel.setText("current item: " + testHA.getCurrent());
  }

  private void setTestAPPDisplayList(final ArrayPP a)
  {
    arrayPPList.setModel(new javax.swing.AbstractListModel()
    {
      public int getSize()
      {
        return a.length();
      }

      public Object getElementAt(int index)
      {
        return a.get(index);
      }
    });
    arrayPPRereadButton.setEnabled(true);
  }
  private void refillTestAPPDisplayList()
  {
    setTestAPPDisplayList(testAPP);
    arrayPPRereadButton.setEnabled(false);
  }
  
  private void fixColorsStylePartExample()
  {
    try
    {
      byte style, part;
      switch (colorsStyleComboBox.getSelectedIndex())
      {
        case 0:
          style = Colors.MOCHA;
          break;
        case 1:
          style = Colors.HUSKY;
          break;
        case 2:
          style = Colors.ASTRO;
          break;
        case 3:
          style = getColors().CUSTOM;
          break;
        case 4:
          style = Colors.DEFAULT;
          break;
        default:
          throw new IllegalStateException("Unexpected color style: " + colorsStyleComboBox.getSelectedIndex());
      }
      switch (colorsPartComboBox.getSelectedIndex())
      {
        case 0:
          part = Colors.BACK;
          break;
        case 1:
          part = Colors.BORDER;
          break;
        case 2:
          part = Colors.BOX;
          break;
        case 3:
          part = Colors.TEXT;
          break;
        case 4:
          part = Colors.TEXT_AREA;
          break;
        default:
          throw new IllegalStateException("Unexpected color part: " + colorsStyleComboBox.getSelectedIndex());
      }
      setColorStylePartPanel.setBackground(getColors().getColor(style, part));
    }
    catch (Throwable t)
    {
      alertOf(t);
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable() 
    
    {
      public void run()
      {
        new TestBHFrame().setVisible(true);
      }
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BHFrameLabel;
    private javax.swing.JCheckBox BHNotifierCancelButtonCheckBox;
    private javax.swing.JCheckBox BHNotifierNoButtonCheckBox;
    private javax.swing.JCheckBox BHNotifierOKButtonCheckBox;
    private javax.swing.JCheckBox BHNotifierYesButtonCheckBox;
    private javax.swing.JComboBox BoardPanelOpenSquareDirectionComboBox;
    /*
    private javax.swing.JSpinner BoardPanelOpenSquareXSpinner;
    */private BHSpinner BoardPanelOpenSquareXSpinner;
    /*
    private javax.swing.JSpinner BoardPanelOpenSquareYSpinner;
    */private BHSpinner BoardPanelOpenSquareYSpinner;
    /*
    private javax.swing.JPanel BoardPanelPanel;
    */private bht.tools.comps.gameboard.BHBoardPanel BoardPanelPanel;
    private javax.swing.JPanel BoardPanelSetupPanel;
    private javax.swing.JTextField HistoryArrayAddTextField;
    private javax.swing.JButton alertOfMessageButton;
    private javax.swing.JPanel alertOfMessagePanel;
    private javax.swing.JTextField alertOfMessageTextField;
    private javax.swing.JComboBox alertOfMessageTypeComboBox;
    private javax.swing.JButton alertOfThrowableButton;
    private javax.swing.JComboBox alertOfThrowableComboBox;
    private javax.swing.JPanel alertOfThrowablePanel;
    private javax.swing.JTextField alertOfThrowableTextField;
    private javax.swing.JTextField arrayPPAddTextField;
    private javax.swing.JButton arrayPPCompareToButton;
    private javax.swing.JTextField arrayPPCompareToTextField;
    private javax.swing.JTextField arrayPPGetIndexOfTextField;
    private javax.swing.JTextField arrayPPGetIndicesOfTextField;
    private javax.swing.JTextField arrayPPGetLastIndexOfTextField;
    private javax.swing.JTextField arrayPPHasNotTextField;
    private javax.swing.JButton arrayPPInsertButton;
    private javax.swing.JSpinner arrayPPInsertIndexSpinner;
    private javax.swing.JTextField arrayPPInsertValTextField;
    private javax.swing.JButton arrayPPIsolateButton;
    private javax.swing.JTextField arrayPPIsolateTextField;
    private javax.swing.JList arrayPPList;
    private javax.swing.JCheckBox arrayPPRemoveAllCheckBox;
    /*
    private javax.swing.JSpinner arrayPPRemoveSpinner;
    */private BHSpinner arrayPPRemoveSpinner;
    private javax.swing.JTextField arrayPPRemoveTextField;
    private javax.swing.JCheckBox arrayPPReplaceAllCheckBox;
    private javax.swing.JTextField arrayPPReplaceTextField1;
    private javax.swing.JTextField arrayPPReplaceTextField2;
    private javax.swing.JButton arrayPPRereadButton;
    private javax.swing.JButton arrayPPRereadButton1;
    private javax.swing.JButton arrayPPSetButton;
    /*
    private javax.swing.JSpinner arrayPPSetIndexSpinner;
    */private BHSpinner arrayPPSetIndexSpinner;
    private javax.swing.JTextField arrayPPSetValTextField;
    /*
    private javax.swing.JSpinner arrayPPSubSetBeginIndexSpinner;
    */private BHSpinner arrayPPSubSetBeginIndexSpinner;
    private javax.swing.JButton arrayPPSubSetButton;
    /*
    private javax.swing.JSpinner arrayPPSubSetEndIndexSpinner;
    */private BHSpinner arrayPPSubSetEndIndexSpinner;
    private javax.swing.JButton arrayPPSwapButton;
    /*
    private javax.swing.JSpinner arrayPPSwapIndex1Spinner;
    */private BHSpinner arrayPPSwapIndex1Spinner;
    /*
    private javax.swing.JSpinner arrayPPSwapIndex2Spinner;
    */private BHSpinner arrayPPSwapIndex2Spinner;
    /*
    private javax.swing.JPasswordField bhPasswordField;
    */private BHPasswordField bhPasswordField;
    private javax.swing.JTextField bhPasswordFieldTipTextField;
    /*
    private javax.swing.JSpinner bhSpinner;
    */private BHSpinner bhSpinner;
    /*
    private javax.swing.JTextField bhSpinnerToolTipTextField;
    */private BHTextField bhSpinnerToolTipTextField;
    /*
    private javax.swing.JTextField bhTextField;
    */private BHTextField bhTextField;
    /*
    private javax.swing.JTextField bhTextFieldTipTextField;
    */private BHTextField bhTextFieldTipTextField;
    private javax.swing.JTabbedPane bht_tools_compsTabbedPane;
    private javax.swing.JTabbedPane bht_tools_effectsTabbedPane;
    private javax.swing.JTabbedPane bht_tools_miscTabbedPane;
    private javax.swing.JTabbedPane bht_tools_utilitiesTabbedPane;
    private javax.swing.JComboBox colorsPartComboBox;
    private javax.swing.JComboBox colorsStyleComboBox;
    private javax.swing.JTextField copierCopyTextField;
    private javax.swing.JTextArea copierSearchToCopyInTextArea;
    private javax.swing.JTabbedPane gameboardTabbedPane;
    /*
    private javax.swing.JSpinner historyArrayCanGoToSpinner;
    */ private BHSpinner historyArrayCanGoToSpinner;
    private javax.swing.JLabel historyArrayCurrentItemLabel;
    private javax.swing.JList historyArrayGetBackHistList;
    private javax.swing.JList historyArrayGetFullHistList;
    private javax.swing.JList historyArrayGetNextHistList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton40;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel160;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSpinner jSpinner1;
    /*
    private javax.swing.JSpinner jSpinner2;
    */private BHSpinner jSpinner2;
    /*
    private javax.swing.JSpinner jSpinner3;
    */private BHSpinner jSpinner3;
    /*
    private javax.swing.JSpinner jSpinner4;
    */private BHSpinner jSpinner4;
    /*
    private javax.swing.JSpinner jSpinner8;
    */private BHSpinner jSpinner8;
    /*
    private javax.swing.JSpinner jSpinner9;
    */private BHSpinner jSpinner9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane10;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTabbedPane jTabbedPane8;
    private javax.swing.JTabbedPane jTabbedPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JPanel setColorHexPanel;
    private javax.swing.JPanel setColorStylePartPanel;
    private javax.swing.JTextField yesNoBoxBoolPromptTextField1;
    private javax.swing.JTextField yesNoBoxBoolPromptTextField2;
    private javax.swing.JTextField yesNoBoxBoolTitleTextField;
    private javax.swing.JComboBox yesNoBoxBoolTypeComboBox;
    private javax.swing.JTextField yesNoBoxIntegerPromptTextField1;
    private javax.swing.JTextField yesNoBoxIntegerPromptTextField2;
    private javax.swing.JTextField yesNoBoxIntegerTitleTextField;
    private javax.swing.JComboBox yesNoBoxIntegerTypeComboBox;
    private javax.swing.JLabel yesNoBoxResultLocationLabel;
    // End of variables declaration//GEN-END:variables
  private ArrayPP<String> testAPP;
  private ArrayTable<String> testAT;
  private HistoryArray<String> testHA;
  public static final String TITLE = "Blue Husky's Toolbox", VERSION = "2.0.0";

  private String[] parseCSVToArray(String text)
  {
    ArrayPP<String> a = new ArrayPP<String>(new String[]{});
    String word = "";
    for (int i=0; i < text.length(); i++)
    {
      if (text.charAt(i) == ',')
      {
        a.add(word);
        word = "";
        continue;
      }
      word += text.charAt(i);
    }
    a.add(word);
//    System.out.println(a);
    return a.toArray();
  }
}
